= content_tag(:div,
id: :intervention_template_form,
data: { template: @intervention_template.to_json,
  product_parameters_attributes: product_parameters_list,
  association_activities_attributes: association_activities_list,
  procedure_names: procedure_parameters(@procedure) }) do

  .form-errors.flash.error{ 'v-if': '!(errors.length == 0)' }
    %a{ 'href': '#', class: "close", 'v-on:click': 'errors = []'}= 'x'
    %ul{ class: 'errors-messages' }
      %li{ 'v-for': 'error in errors' }
        {{ error }}


  = field_set do
    -# = f.referenced_association :campaign, input_html: { 'v-model': 'template.campaign_id' }
    %list-input{ label: :campaign.tl,
    url: unroll_backend_campaigns_path,
    ':require': 'true',
    'v-model': 'template.campaign_id',
    value_label: @intervention_template.campaign.name,
    disable: @intervention_template.id != nil }
    = f.input :name, input_html: { 'v-model': 'template.name' }
    = f.input :active, input_html: { 'v-model': 'template.active' }

    = simple_fields_for(f.object.association_activities.new) do |p|
      .control-group.activity-label
        %label.optional.control-label
          =:activities.tl
          %br
          %em.small.go-inline
            = :warning_if_no_activites_choose.tl
        .activities{ v: { for: '(association, index) in template.association_activities_attributes', if: 'association._destroy == null' }}
          %list-input{ label: '',
          url: '/backend/activities/unroll',
          'v-model': 'association.activity_id',
          ':value_label': 'association.activity_label',
          ':aid': 'index',
          'v-bind:errors': 'association.errors'}
          %a{ href: '#', '@click': 'removeAssociation(index)', 'v-if': 'canRemoveAssociation()', style: "margin-left: 60px;" }
            x
        .controls{ 'v-if': 'canAddAssociation()' }
          %a.add-association{ href:'#', '@click': 'addAssociation' }
            = :add.tl

    .control-group.required
      %label.control-label.required
        %abbr{title:'Obligatoire'}
          *
        = :workflow.tl
      .controls
        %input{ v: { model: 'template.workflow' }, type: :number}
        .input-right-addon
          ha/h
    .control-group
      %label.control-label
        = :preparation_time.tl
      .controls
        %input{ 'v-model': 'template.preparation_time_hours', type: :number }
        H
        %input{ 'v-model': 'template.preparation_time_minutes', type: :number }
        Min
    = f.input :description, wrapper: :bootstrap, as: :text, input_html: { 'v-model': 'template.description' }
  -# Parameters of the template
  = field_set :product_parameters do
    = simple_fields_for f.object.product_parameters.new do |p|
      .list_of_procedures{ 'v-for': 'procedure in procedure_names' }
        .nested-association.nested-parameters
          .nested-fields.nested-product-parameter
            .parameters{ 'v-for': '(parameter, index) in attributesForProcedure(procedure)', 'v-if': 'parameter._destroy == null' }
              -# Name of the product
              .control-group
                %label.control-label.required
                  %abbr{title:'Obligatoire'}
                    *
                  {{ procedure.name }}
                .controls
                  %input{ 'v-model': 'parameter.product_name',
                    '@keyup': 'completeDropdown(index, procedure, $event)',
                    class: 'selector-search', type: :text }
                  %button.selector-dropdown.btn.btn-default.dropdown-toggle.sr-only{'@click.prevent': 'completeDropdown(index, procedure, $event)'}
              .items-menu.choices-selector.intervention-template-unroll{ 'v-if': 'parameter.showList' }
                %ul.items-list
                  %li.item{ 'v-on:click.stop': "updateProduct(index, '', '')" }
                  %li.item{ 'v-for': 'prod in productList',
                  'v-on:click.stop': 'updateProduct(index, procedure, prod.id, prod.label)',
                  'v-html': 'newAddMarkInDropdown(index, procedure, prod.label)'}
              -# Quantity
              .control-group.integer.required{ 'v-show': "parameter.procedure.type != 'plant'" }
                %label.control-label.required
                  %abbr{ title:'Obligatoire' }
                    *
                  = :quantity.tl
                .controls.inline-controls
                  %input{ 'v-model': 'parameter.quantity', type: :number }
                    %select{ v: { model: 'parameter.unit', if: 'procedure.unities.constructor == Array' }, '@change': 'updateUnit(procedure, index, $event)'}
                      %option{ 'v-for': 'unity in procedure.unities', 'v-bind:value': 'unity.name' }
                        {{ unity.human_name }}
                    %span
                      {{ procedure.unities.human_name }}

              %a.remove-link{ href: '#', 'v-on:click': 'removeParameter(parameter.id_number)' }
                = :remove.tl
                {{ procedure.name }}
          .links
            %a.nested-add.add_fields{ href: '#', '@click.stop': 'addParameter(procedure)' }
              = :add.tl
              {{ procedure.name }}

  - f.clear_actions!
  - f.add do
    %button.btn.primary{ 'v-on:click.prevent': 'saveTemplate', ':disabled': 'canSubmitForm()' }
      = controller.action_name == 'edit'  ? :edit.tl : :create.tl
